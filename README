= Crashana

Crashana is the best rails exception manager.

If Evan pushed a source code that ends us causing too many server exceptions, he'd be alerted.
You can re-assign and track crashes with Asana.

Most of the exceptions are harmless if they occur in low proportions.
You can mark them so, once you do a basic investigation.

== Dependancies

- git
- Asana
- rails
- mongoid / mongodb.
- Plays well with capistrano, but optional.

== Features

- Plays with Git:
-- Figures out the author based on git commits, and assigns.
-- You'd know the earliest version of the code causing a crash. i.e., understand git commits.

- Deduping crashes: 
-- Any smart crash system needs to strip out numbers etc and group crashes.

- E-mail alerts:
-- Will mail you if you have too many crashes. You can configure this mail to go to pagerduty or
some such service, so that you can get woken up in the middle of the night.

- Asana:
-- Add tags to crashes and sort based on that. Helpful when crashes are being logged from iPhone clients etc.
-- Can configure multiple projects.

- Prioritize:
-- Tells you the % of calls of a particular action that results in an error.
If a crash happens very rarely, you probably don't care about it as much as some action,
that fails most of the time.
-- Tells you the number of users who are affected by the crash.
-- Mark crashes as harmless. You can choose to be alerted once more than 2% of calls fail, for ex.
This is extremely useful. Let's say you are crawling facebook for the user's profile pic.
The calls to facebook can fail for various reasons, including connectivity issues. So it's OK,
as long as, the majority of calls pass. Same with a few rare race conditions.

== Usage

0. Install:

gem install crashana

or add `crashana` to your Gemfile and `bundle install`.

1. Configure:

Crashana depends on mongoid, so you need to configure it. You might have to make
a config/mongoid.yml and edit it.

Configure crasha by adding a config/crashana.yml, and set your password.
You can find a default version of the file here: <link>

Make sure you also configure it with your Asana API credentials.

2. Usage:

Visit `/crashana` of your app and you must see the exceptions that your app encountered.
We trace your rails actions and delayed jobs, automatically.

To trace anything else, you should add the following lines:

# Example:
Crashana.action_scope(action: params[:action], user_id: session[:user_id],
  project: "iPhone", tags: ["From client"]) do
    # Serve the action to perform.
    # Example: Rendering a thrift RPC action.
end



